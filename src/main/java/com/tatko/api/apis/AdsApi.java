/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.tatko.api.apis;

import com.tatko.api.apis.models.AdApiObject;
import com.tatko.api.apis.models.AdCreateApiRequest;
import com.tatko.api.apis.models.AdsApiObject;
import com.tatko.api.apis.models.GeneralErrorResultApiResponse;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-10-21T09:58:04.815778300+03:00[Europe/Kiev]")
@Validated
public interface AdsApi {

    Logger log = LoggerFactory.getLogger(AdsApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @Operation(summary = "Create ad", description = "", tags={ "Ads" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Ad has been created", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AdApiObject.class))),
        
        @ApiResponse(responseCode = "400", description = "The request cannot be processed due to the format or request data value", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GeneralErrorResultApiResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized. The request cannot be processed due to the issue with provided authentication information"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden. Access to the requested resource is forbidden due to the caller's access permissions"),
        
        @ApiResponse(responseCode = "500", description = "Unexpected processing error. The request can be re-submitted to the processing", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GeneralErrorResultApiResponse.class))) })
    @RequestMapping(value = "/v1/ads",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<AdApiObject> adCreate(@Parameter(in = ParameterIn.DEFAULT, description = "", required=true, schema=@Schema()) @Valid @RequestBody AdCreateApiRequest body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"ad\" : \"ad\",\r\n  \"creatingTime\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"id\" : 0,\r\n  \"deliveredTime\" : \"2000-01-23T04:56:07.000+00:00\"\r\n}", AdApiObject.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default AdsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Delete ad", description = "", tags={ "Ads" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "204", description = "Ad has been deleted"),
        
        @ApiResponse(responseCode = "400", description = "The request cannot be processed due to the format or request data value", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GeneralErrorResultApiResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized. The request cannot be processed due to the issue with provided authentication information"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden. Access to the requested resource is forbidden due to the caller's access permissions"),
        
        @ApiResponse(responseCode = "500", description = "Unexpected processing error. The request can be re-submitted to the processing", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GeneralErrorResultApiResponse.class))) })
    @RequestMapping(value = "/v1/ads/{adId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    default ResponseEntity<Void> adDelete(@Parameter(in = ParameterIn.PATH, description = "Ad ID", required=true, schema=@Schema()) @PathVariable("adId") Long adId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default AdsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Get ad by ID", description = "", tags={ "Ads" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Success", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AdApiObject.class))),
        
        @ApiResponse(responseCode = "400", description = "The request cannot be processed due to the format or request data value", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GeneralErrorResultApiResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized. The request cannot be processed due to the issue with provided authentication information"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden. Access to the requested resource is forbidden due to the caller's access permissions"),
        
        @ApiResponse(responseCode = "500", description = "Unexpected processing error. The request can be re-submitted to the processing", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GeneralErrorResultApiResponse.class))) })
    @RequestMapping(value = "/v1/ads/{adId}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<AdApiObject> adGetById(@Parameter(in = ParameterIn.PATH, description = "Ad ID", required=true, schema=@Schema()) @PathVariable("adId") Long adId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"ad\" : \"ad\",\r\n  \"creatingTime\" : \"2000-01-23T04:56:07.000+00:00\",\r\n  \"id\" : 0,\r\n  \"deliveredTime\" : \"2000-01-23T04:56:07.000+00:00\"\r\n}", AdApiObject.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default AdsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Get list of available Ads", description = "", tags={ "Ads" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Successfully retrieved the response", content = @Content(mediaType = "application/json", schema = @Schema(implementation = AdsApiObject.class))),
        
        @ApiResponse(responseCode = "400", description = "The request cannot be processed due to the format or request data value", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GeneralErrorResultApiResponse.class))),
        
        @ApiResponse(responseCode = "401", description = "Unauthorized. The request cannot be processed due to the issue with provided authentication information"),
        
        @ApiResponse(responseCode = "403", description = "Forbidden. Access to the requested resource is forbidden due to the caller's access permissions"),
        
        @ApiResponse(responseCode = "500", description = "Unexpected processing error. The request can be re-submitted to the processing", content = @Content(mediaType = "application/json", schema = @Schema(implementation = GeneralErrorResultApiResponse.class))) })
    @RequestMapping(value = "/v1/ads",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<AdsApiObject> adsRequest(@NotNull @Parameter(in = ParameterIn.QUERY, description = "Search start position for pagination support." ,required=true,schema=@Schema( defaultValue="0")) @Valid @RequestParam(value = "page", required = true, defaultValue="0") Integer page, @NotNull @Parameter(in = ParameterIn.QUERY, description = "Number of requested elements. 20 by default." ,required=true,schema=@Schema( defaultValue="20")) @Valid @RequestParam(value = "size", required = true, defaultValue="20") Integer size) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\r\n  \"ad\" : [ {\r\n    \"ad\" : \"ad\",\r\n    \"creatingTime\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"id\" : 0,\r\n    \"deliveredTime\" : \"2000-01-23T04:56:07.000+00:00\"\r\n  }, {\r\n    \"ad\" : \"ad\",\r\n    \"creatingTime\" : \"2000-01-23T04:56:07.000+00:00\",\r\n    \"id\" : 0,\r\n    \"deliveredTime\" : \"2000-01-23T04:56:07.000+00:00\"\r\n  } ]\r\n}", AdsApiObject.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default AdsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}

